-{ extension("class", ...) }
-{ extension("switch", ...) }

local TypeWalker = require 'tua.analysis.TypeWalker'
local TypeScope = require 'tua.analysis.TypeScope'
local getMetainfo = require 'luacp.analysis.helpers'.getMetainfo

local class TypeScopeCreator extends TypeWalker
	scope = TypeScope:createFileScope()

	function new(logger)
		TypeWalker.prototype.new(self, logger)
	end

	function pushScope()
		self.scope = TypeScope(self.scope)
	end

	function popScope()
		self.scope = assert(self.scope.parent, "Unexpected call to popScope")
	end

	function traverseType(nodeType)
		return self.scope:fixType(nodeType)
	end

	function visitOp(node, ...)
		self.super.visitOp(self, node, ...)

		local operator, operand, rhs = node[1], getMetainfo(node[2]).type, node[3]
		local signature = `MetaMethod { operator, operand }
		if rhs then
			signature[2] = getMetainfo(rhs).type
		end

		-- local method, level = helpers.filterMethods(operand, signature)
		if method then
			getMetainfo(node).type = method[#method]
			return node
		else
			return self:error("Cannot find operator for " .. operator .. " on " .. operand.name, node)
		end
	end

	function visitNil(node)
		getMetainfo(node).type = self.scope:getType("Nil")
	end
	function visitTrue(node)
		getMetainfo(node).type = self.scope:getType("Boolean")
	end
	function visitFalse(node)
		getMetainfo(node).type = self.scope:getType("Boolean")
	end
	function visitNumber(node)
		getMetainfo(node).type = self.scope:getType("Number")
	end
	function visitString(node)
		getMetainfo(node).type = self.scope:getType("String")
	end
end

return TypeScopeCreator
