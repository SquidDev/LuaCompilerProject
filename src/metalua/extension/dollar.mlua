-{ extension ('switch', ...) }

local M = setmetatable({ register = { } }, {__call = function(self, ...) return self.extend(...) end })

local function dollar_builder(e)
	switch e do
	case `Call{ `Id{name}, ... } then
		local entry = M.register[name] or error ("No macro "..name.." registered")
		return entry(...)
	case `Id{name} then
		local entry = M.register[name] or error ("No macro "..name.." registered")
		switch type(entry) do
		case 'function' then return entry()
		case 'table'    then return entry -- constant AST
		case t          then error ("Invalid macro type "..t)
		end
	case _ then error "Invalid $macro, '$' must be followed by an identifier or function call"
	end
end

function M.extend(mlp)
	_mlp = require 'metalua.compiler.grammar.generator'.future(mlp)
	mlp.lexer:add("$")

	mlp.expr.prefix:add { '$', prec = 100, builder = |_, x| dollar_builder(x) }
	mlp.stat:add{ '$', _mlp.expr, builder = |x| dollar_builder(x[1]) }

	return M
end

return M
