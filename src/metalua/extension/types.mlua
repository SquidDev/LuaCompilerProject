--- Allows to write "a `f` b" instead of "f(a, b)". Taken from Haskell.

local gg = require 'metalua.compiler.grammar.generator'

return function(M)
	local types = {}
	local _M = gg.future(M)
	local _types = gg.future(types)

	local function getMetainfo(node)
		local metainfo = node.metainfo
		if not metainfo then
			metainfo = {}
			node.metainfo = metainfo
		end
		return metainfo
	end


	types.type_def = gg.multisequence {
		name = "type",
		gg.sequence {
			name = "function type definition",
			"(", gg.list {
				primary     = _types.type_def,
				separators  = ",",
				terminators = ")"
			}, ")", ":",
			gg.multisequence {
				{
					"[", gg.list {
						primary     = _types.type_def,
						separators  = ",",
						terminators = "]"
					}, "]"
				},
				default = _types.type_def,
			},
			builder = function(x)
				return `FunctionType { unpack(x) }
			end
		},
		gg.sequence {
			name = "table type definition",
			"{",
			_types.type_def,
			gg.onkeyword {
				':', _types.type_def,
			},
			"}",
			builder = function(x)
				if #x == 1 then
					return `ArrayType { x[1] }
				else
					return `HashType { x[1], x[2] }
				end
			end
		},
		default = _M.id
	}

	-- Overrides
	M.declaration.default = gg.sequence {
		name = "declaration",
		_M.id, gg.onkeyword {
			name="type definition",
			":", _types.type_def
		},
		builder = function(node)
			getMetainfo(node).type = node[2]
			return node[1]
		end
	}

	M.func_val = gg.sequence {
		name = "function body",
		"(", _M.func_params_content, ")", gg.onkeyword {
			":", _types.return_def
		},
		_M.block, "end",
		builder = function(x)
			local types = `FunctionType { }
			for _, params in ipairs(x[1]) do
				table.insert(types, params.type or `Unknown)
			end
			table.insert(types, x[2] or `Unknown)

			return  `Function {
				x[1], x[3],
				metainfo = { type = types }
			}
		end
	}
end
